<?php
namespace Minbaby\OpentracingTrift;

use OpenTracing\GlobalTracer;
use OpenTracing\Span;
use OpenTracing\SpanContext;
use OpenTracing\SpanOptions;
use OpenTracing\Tracer;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TProtocolDecorator;

class ServerProtocolDecorator extends TProtocolDecorator
{
    protected $name;
    protected $type;
    protected $seqId;
    /**
     * @var Tracer
     */
    protected $tracer;
    
    /**
     * @var SpanContext
     */
    protected $spanOption;
    
    /**
     * ServerProtocolDecorator constructor.
     * @param TProtocol $protocol
     * @param           $name
     * @param           $type
     * @param           $seqId
     * @param Tracer    $tracer
     */
    public function __construct(
        TProtocol $protocol,
        $name,
        $type,
        $seqId,
        Tracer $tracer
    ) {
        parent::__construct($protocol);
        $this->name = $name;
        $this->type = $type;
        $this->seqId = $seqId;
        $this->tracer = $tracer;
        
    }
    
    /**
     * @inheritdoc
     */
    public function readMessageBegin(&$name, &$type, &$seqid)
    {
        $activeSpan = $this->tracer->startSpan('ab', []);
        
        
        return parent::readMessageBegin($name, $type, $seqid); // TODO: Change the autogenerated stub
    }
    
}